import itertools

from equation_solver import ISolver
from equation_solver import Polynomial as Poly

class CubicEqSolver(ISolver):
    def __init__(self):
        self.rhs = None
        self.lhs = None

    def solve(self, lhs: Poly, rhs: Poly):
        self.lhs = lhs
        self.rhs = rhs
        
        steps = []

        substeps = self.normalize_equation()
        steps.extend(substeps)    

        self.assert_third_order_equation()


    def normalize(self):
        steps = []

        steps.append("\nMove all terms to the left hand side:")
        self.lhs = self.lhs.subt(self.rhs)
        self.rhs = self.rhs.subt(self.rhs)
        steps.append(f"{self.lhs} = {self.rhs}")

        return steps

    def assert_third_order_equation(self):
        pass

    def find_factor(self):
        # All candidate factor
        factors = [item for p in zip(itertools.count(0, 1), itertools(1, -1)) for item in p]

